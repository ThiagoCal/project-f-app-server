CREATE TABLE parties (
    id serial PRIMARY KEY,
    user_id INT,
    CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(1000) NOT NULL,
    address VARCHAR(1000) NOT NULL,
    category VARCHAR(2000),
    party_date DATE NOT NULL DEFAULT CURRENT_DATE,
    description VARCHAR(2000),
    price FLOAT,
    rating FLOAT,
    is_active BOOLEAN DEFAULT true,
    latitude FLOAT,
    longitude FLOAT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
)

CREATE TABLE bookmarks (
    id serial PRIMARY KEY,
    user_id INT,
    CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE,
    party_id INT,
    CONSTRAINT fk_party FOREIGN KEY(party_id) REFERENCES parties(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
)


CREATE TABLE users (
 id uuid DEFAULT uuid_generate_v4 (),
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
	username VARCHAR (50) UNIQUE NOT NULL,
	password VARCHAR (1000) NOT NULL,
	email VARCHAR (255) UNIQUE NOT NULL,
  is_producer boolean DEFAULT true,
  is_admin boolean DEFAULT false,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  PRIMARY KEY (id)
)

CREATE TABLE PINK_FLOYD (
	id uuid DEFAULT uuid_generate_v4 (),
	album_name VARCHAR NOT NULL,
	release_date DATE NOT NULL,
	PRIMARY KEY (id)
);

CREATE TABLE bookmarks (
    id uuid DEFAULT uuid_generate_v4 (),
    user_id uuid,
    CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE,
    party_id uuid,
    CONSTRAINT fk_party FOREIGN KEY(party_id) REFERENCES parties(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id)
)

CREATE TABLE parties (
   id uuid DEFAULT uuid_generate_v4 (),
    user_id uuid,
    CONSTRAINT fk_user FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(1000) NOT NULL,
    address VARCHAR(1000) NOT NULL,
    category VARCHAR(2000),
    party_date DATE NOT NULL DEFAULT CURRENT_DATE,
    description VARCHAR(2000),
    price FLOAT,
    rating FLOAT,
    is_active BOOLEAN DEFAULT true,
    latitude FLOAT,
    longitude FLOAT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (id)
)




CREATE TABLE party_categories (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(255) 
);


INSERT INTO party_categories (category_name) VALUES
    ('DJ night'),
    ('Live music event'),
    ('Dance party'),
    ('Themed party'),
    ('VIP party'),
    ('Club anniversary'),
    ('Fundraising event');

CREATE TABLE party_type_categories (
    id serial PRIMARY KEY,
    party_id uuid,
    CONSTRAINT fk_party FOREIGN KEY(party_id) REFERENCES parties(id),
    category_id INT,
    CONSTRAINT fk_party_category FOREIGN KEY(category_id ) REFERENCES party_categories(category_id),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
)

CREATE TABLE music_categories (
    music_id SERIAL PRIMARY KEY,
    category_name VARCHAR(255)
);

INSERT INTO music_categories(category_name) VALUES
    ('Pop'),
    ('Hip-Hop/Rap'),
    ('R&B/Soul'),
    ('Electronic/Dance'),
    ('Rock/Alternative'),
    ('Latin/Salsa'),
    ('Reggaeton'),
    ('Jazz/Blues');

CREATE TABLE party_music_categories (
    id serial PRIMARY KEY,
    party_id uuid,
    CONSTRAINT fk_party FOREIGN KEY(party_id) REFERENCES parties(id),
    music_id INT,
    CONSTRAINT fk_party_category FOREIGN KEY(music_id ) REFERENCES music_categories(music_id),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
)




